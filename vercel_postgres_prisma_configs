# How to configure Vercel Postgres database with Prisma

- From [vercel.com](https://vercel.com/) create a database for your Vercel project
- Follow the `getting started` quickstart below the `storage` tab
- Once installed you need Prisma:
- `npm install @prisma/client`
- and then `npm install prisma --save-dev` for devDependancies
- run `npx prisma init`
- inside the new `schema.prisma` file paste the following (added a template for user schema):

```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL")
  directUrl    = env("POSTGRES_URL_NON_POOLING")
  relationMode = "prisma"
}
// your models


```

- copy and paste whole content of `.env.development.local` file into `.env` file.
- run first baseline migration with `prisma migrate dev --name init`
- insert this script in your `package.json`:

```
"scripts": {
    "migrate": "prisma generate && prisma migrate deploy"
  }
```

- run `npm run migrate`
- run it everytime you make a change to your schema
- inside `utils` folder create a `db.ts` file and paste the following, read docs here to understand why(https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/nextjs-prisma-client-dev-practices):

```
import { PrismaClient } from '@prisma/client'

const prismaClientSingleton = () => {
  return new PrismaClient()
}

declare const globalThis: {
  prismaGlobal: ReturnType<typeof prismaClientSingleton>;
} & typeof global;

const prisma = globalThis.prismaGlobal ?? prismaClientSingleton()

export default prisma

if (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma
```

## Docs

https://vercel.com/docs/storage/vercel-postgres/using-an-orm
https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/introduction
https://vercel.com/docs/storage/vercel-postgres/using-an-orm
